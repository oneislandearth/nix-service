#!/bin/bash

# Describe the build function
function build() {

  # Build the modules in nix
  nix-build modules.nix -o .nix/dist

  # Remove the modules installed by yarn
  rm node_modules -rf

  # Get the current package name
  name=$( cat package.json | jq -r '.name' ) 

  # Link to the modules built by nix
  ln -s $PWD/.nix/dist/libexec/$name/node_modules $PWD/node_modules
}

# Deploy the service
function serve() {

  # Define the spstic version to use
  version=0.0.2

  # Log a message for install
  echo -e "\x1b[34m\x1b[1m[nix-service]\x1b[0m Installing latest version of spstic...\n"

  # Make the tools folder
  mkdir -p .nix/tools

  # Install spastic to the tools
  curl -s --compressed  https://codeload.github.com/danzlarkin/spstic/tar.gz/refs/tags/v$version | tar xz -C .nix/tools

  # Log a message for install
  echo -e "\x1b[34m\x1b[1m[nix-service]\x1b[0m Specify any spstic flags?\n"

  # Ask for flags
  read -p '> ' flags

  # Log out the serve message
  echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Serving the environment with spstic\n"

  # Run spstic
  .nix/tools/spstic-$version/spstic --local $flags
}

# Deploy the code to a server space
function distribute() {

  # Create the production folder
  mkdir -p .nix/builds/current

  # Remove any existing files
  rm .nix/builds/current/* -rf > /dev/null

  # Copy the files from the public directory
  cp -r ./public/* .nix/builds/current

  # Build the main script as a bundle
  esbuild --bundle --loader:.js=jsx --minify --format=esm --outfile=.nix/builds/current/main-bundle.js public/main.js

  # Remove the main script as it is not used
  rm .nix/builds/current/main.js

  # Compute the hash
  hash=$( nix-hash --type sha1 .nix/builds/current )

  # Remove the existing folder for the hash
  rm .nix/builds/$hash -rf > /dev/null

  # Rename the folder using the hash
  mv .nix/builds/current .nix/builds/$hash

  # Read the authorization credentials
  authorization=$(cat .nix/authorization)

  # Log a message for uploading
  echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Deploying the revision to devspace server...\n"

  # Load the existing ifs
  OIFS="$IFS"

  # Replace the ifs
  IFS=$'\n'

  # Iterate through the files
  for file in $(find .nix/builds/$hash -type f -exec ls {} +); do

    # Define the localised path
    path=${file/".nix/builds/"/""}

    # Compute the escaped url path
    escaped=${path// /"%20"}

    # Read the file type
    type=$(mimetype -b "$file")
    
    # Upload the file
    curl -s -o /dev/null --location --request POST "https://devspace.oneisland.io/$escaped" \
    --header "Content-Type: $type" \
    --header "Authorization: $authorization" \
    --data-binary "@$file"
  done;

  # Switch back the ifs
  IFS="$OIFS"

  # Log a message for completion
  echo -e "\x1b[34m\x1b[1m[nix-service]\x1b[0m Successfully deployed to https://devspace.oneisland.io/$hash/\n"
}

# Add another dependency
function addpkg() {

  # Remove the node modules
  rm node_modules -rf

  # Log a message for install
  echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Enter the name of the dependency package\n"

  # Ask for flags
  read -p '> ' package

  # Install the package
  yarn add $package

  # Log out the added message
  echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Added the dependency package with yarn\n"

  # Convert the modules to nix
  yarn2nix > yarn.nix

  # Build
  build
}

# Describe the reconfigure function
function reconfigure() {

  # Remove the node modules
  rm node_modules -rf

  # Install the modules from yarn
  yarn install -s

  # Convert the modules to nix
  yarn2nix > yarn.nix

  # Build
  build
}

# Welcome message
echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m\n"

# Handle the operations
PS3=$'\n'"Select operation: "

select opt in build serve distribute "add dependency" reconfigure; do

  case $opt in
    build)
      echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Building the environment\n"
      build
      break
      ;;
    serve)
      echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Preparing the environment\n"
      serve 
      break
      ;;
    distribute)
      echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Bundling up the current code revision...\n"
      distribute
      break
      ;;
    "add dependency")
      echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Clearing the environment to add new dependency package\n"
      addpkg
      break
      ;;
    reconfigure)
      echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Reconfiguring all packages with yarn\n"
      reconfigure
      break
      ;;
    *) 
      echo -e "\n\x1b[34m\x1b[1m[nix-service]\x1b[0m Not a valid command\n"
      exit
      ;;
  esac
done